#!/bin/sh

# Usage: g <command> [filename]
# Encrypt, decrypt, sign, verify, or print information about GPG keys. Use quotes for arguments with spaces.
#
#Commands:
#  genkey "John Doe <john@doe.com>"    Generate a new key pair with specified GPG user ID text
#  addkeys [KEY_ID]                    Add three subkeys (sign, encrypt, auth) to the signer key ID in ~/.local/.g/gpg_signer or the specified KEY_ID
#  whoami                              Display information about the signer key in ~/.local/.g/gpg_signer
#  recipient                           Display information about the recipient key in ~/.local/.g/gpg_recipient
#  encrypt <FILE>                      Encrypt a file with recipient specified in ~/.local/.g/gpg_recipient
#  decrypt <FILE>                      Decrypt a file with sender key specified in ~/.local/.g/gpg_signer
#  decrypt                             Decrypt all .asc and .gpg files in current directory
#  sign <FILE>                         Sign a file using the signer key in ~/.local/.g/gpg_signer
#  verify <SIG> [FILE]                 Verify a detached signature of a file or the standard input
#  export signer                       Export the signer public key in ASCII format
#  export recipient                    Export the recipient public key in ASCII format
#  config signer [KEY_ID]              Set or display the signer key ID in ~/.local/.g/gpg_signer
#  config recipient [KEY_ID]           Set or display the recipient key ID in ~/.local/.g/gpg_recipient
#  keytocard                           Move all subkeys generated by 'g genkey' to Yubikey
#  fgr <KEY_ID>                        Get the fingerprint of a GPG key with the specified KEY_ID
#  upgrade                             Upgrade g to the latest version from GitHub

GITHUB_URL=https://raw.githubusercontent.com/brucify/g/main/g

# Set the paths for the signer and recipient key files
SIGNER_PATH="$HOME/.local/.g/gpg_signer"
RECIPIENT_PATH="$HOME/.local/.g/gpg_recipient"

# Read the signer and recipient key IDs from the files
SIGNER=$(cat "$SIGNER_PATH")
RECIPIENT=$(cat "$RECIPIENT_PATH")

# Function to generate a new GPG keypair
genkey() {
    GPG_UID="$1"
    EMAIL=$(echo "$GPG_UID" | sed -n 's/.*<\(.*\)>/\1/p')
    gpg --quick-gen-key "$GPG_UID" rsa4096 cert 2y
    FPR=$(gpg -k --list-options show-only-fpr-mbox | grep "$EMAIL" | awk '{print $1}')
    addkeys "$FPR"
}

# Function to add three subkeys (sign, encrypt, auth) to an existing key:
addkeys() {
    FPR="$1"
    gpg --quick-add-key "$FPR" rsa4096 sign 2y
    gpg --quick-add-key "$FPR" rsa4096 encrypt 2y
    gpg --quick-add-key "$FPR" rsa4096 auth 2y
}

# Function to print information about the signer key
whoami() {
    echo "$SIGNER_PATH"
    echo "-------------------------------"
    gpg -K "$SIGNER"
}

# Function to print information about the recipient key
recipient() {
    echo "$RECIPIENT_PATH"
    echo "-------------------------------"
    gpg -k "$RECIPIENT"
}

# Function to encrypt a single file
encrypt_file() {
    FILE="$1"
    gpg -a -e -r "$RECIPIENT" -s -u "$SIGNER" "$FILE"
}

# Function to decrypt a single file
decrypt_file() {
    FILE="$1"
    if [ "${FILE##*.}" = "asc" ] || [ "${FILE##*.}" = "gpg" ]; then
        if gpg -d -u "$SIGNER" "$FILE" > "${FILE%.*}"; then
            echo "Decryption done"
        else
            echo "Decryption failed"
            rm "${FILE%.*}"
        fi
    else
        echo "Unsupported file type: $FILE"
    fi
}

# Function to decrypt all .asc files in the current directory
decrypt_all() {
    for FILE in *.asc *.gpg; do
        if [ -f "$FILE" ]; then
            decrypt_file "$FILE"
        fi
    done
}

# Function to sign a detached signature for a single file
sign_file() {
    FILE="$1"
    gpg -a -u "$SIGNER" -o "$FILE.sig" -b "$FILE"
}

# Function to verify a detached single singature
verify() {
    SIG="$1"
    FILE="$2"
    gpg --verify $SIG $FILE
}


# Configure the signer key
config_signer() {
    if [ $# -eq 0 ]; then
        echo "Signer key: $SIGNER"
    else
        mkdir -p $(dirname $SIGNER_PATH)
        echo $1 > $SIGNER_PATH
        echo "Signer key set to: $1"
    fi
}

# Configure the recipient key
config_recipient() {
    if [ $# -eq 0 ]; then
        echo "Recipient key: $RECIPIENT"
    else
        mkdir -p $(dirname $RECIPIENT_PATH)
        echo $1 > $RECIPIENT_PATH
        echo "Recipient key set to: $1"
    fi
}

keytocard() {
    echo "Moving GPG subkeys to YubiKey..." >&2
    # The --command-fd 0 option instructs gpg2 to read commands from file descriptor 0, which is the pipe that receives
    # the commands from printf.
    # The --status-fd 2 option sets file descriptor 2 as the status file descriptor, which means that any status or
    # error messages will be sent to the standard error output (stderr) instead of the standard output (stdout).
    printf "key 1\nkeytocard\n1\ny\nsave\n" | gpg --command-fd 0 --status-fd 2 --edit-key $SIGNER
    printf "key 2\nkeytocard\n2\ny\nsave\n" | gpg --command-fd 0 --status-fd 2 --edit-key $SIGNER
    printf "key 3\nkeytocard\n3\ny\nsave\n" | gpg --command-fd 0 --status-fd 2 --edit-key $SIGNER
}

fgr() {
    KEY_ID="$1"
    # Lists the details of the key with ID e.g. 0xB3CAC1EC782108F6 in machine-readable format using --with-colons option.
    # `grep fpr`: This selects the line that contains the fingerprint of the key.
    # `cut -d ":" -f 10`: This splits the line using : as a delimiter and selects the 10th field which contains the fingerprint.
    # `tr -d " "`: This removes all spaces from the fingerprint.
    # `cut -c 3-`: This remove the 0x prefix from the key ID.
    gpg --list-keys --with-colons "$KEY_ID" \
      | grep fpr \
      | cut -d ":" -f 10 \
      | tr -d " " \
      | grep "$(echo "$KEY_ID" | cut -c 3-)"
}

# Upgrade g to the latest version from GitHub
upgrade() {
    curl $GITHUB_URL -J -o "$HOME/.local/.g/g"
    echo "g upgraded to the latest version!"
}

# Print the usage information for the script
usage() {
    echo "Usage: g <command> [filename]"
    echo "Encrypt, decrypt, sign, verify, or print information about GPG keys. Use quotes for arguments with spaces."
}

# Parse command line arguments
case "$1" in
    genkey)
        if [ -n "$2" ]; then
            genkey "$2"
        else
            echo "Usage: g genkey \"John Doe <john@doe.com>\""
            echo "Generate a new GPG keypair with the given user ID and add it to your GPG keyring."
        fi
        ;;
    addkeys)
        if [ -z "$2" ]; then
            FPR=$(fgr "$SIGNER")
        else
            FPR=$(fgr "$2")
        fi
        addkeys "$FPR"
        ;;
    whoami)
        whoami
        ;;
    recipient)
        recipient
        ;;
    encrypt)
        if [ -n "$2" ]; then
            encrypt_file "$2"
        else
            echo "Usage: g encrypt <FILE>"
            echo "Encrypt a single file with GPG and the recipient key in ~/.local/.g/gpg_recipient."
        fi
        ;;
    decrypt)
        if [ -n "$2" ]; then
            decrypt_file "$2"
        else
            decrypt_all
        fi
        ;;
    sign)
        if [ -n "$2" ]; then
            sign_file "$2"
        else
            echo "Usage: g sign <FILE>"
            echo "Sign a detached signature with the signer key specified in ~/.local/.g/gpg_signer"
        fi
        ;;
    verify)
        if [ -n "$2" ]; then
            verify "$2" "$3"
        else
            echo "Usage: g verify <SIGNATURE> [FILE]"
            echo "Verify a detached signature of a file"
        fi
        ;;
    export)
        case "$2" in
            signer)
                echo "$SIGNER_PATH" >&2
                echo "-------------------------------" >&2
                gpg -a --export "$SIGNER"
                ;;
            recipient)
                echo "$RECIPIENT_PATH" >&2
                echo "-------------------------------" >&2
                gpg -a --export "$RECIPIENT"
                ;;
            *)
                echo "Error: invalid argument. Usage: g export {signer|recipient}"
                exit 1
                ;;
        esac
        ;;
    config)
        case $2 in
            signer) config_signer $3;;
            recipient) config_recipient $3;;
            *) usage;;
        esac
        ;;
    keytocard)
        keytocard
        ;;
    fgr)
        if [ -n "$2" ]; then
            fgr "$2"
        else
            echo "Usage: g fgr <KEY_ID>"
            echo "Displays the fingerprint of the specified GPG key. The KEY_ID argument must be the ID of the key in the format used by GPG, e.g. \"0xB3CAC1EC782108F6\"."
        fi
        ;;
    upgrade)
        upgrade
        ;;
    help)
	usage
        echo ""
        echo "Commands:"
        echo "  genkey \"John Doe <john@doe.com>\"    Generate a new key pair with specified GPG user ID text"
        echo "  addkeys [KEY_ID]                    Add three subkeys (sign, encrypt, auth) to the specified KEY_ID or the signer key ID in ~/.local/.g/gpg_signer"
        echo "  whoami                              Display information about the signer key in ~/.local/.g/gpg_signer"
        echo "  recipient                           Display information about the recipient key in ~/.local/.g/gpg_recipient"
        echo "  encrypt <FILE>                      Encrypt a file with recipient specified in ~/.local/.g/gpg_recipient"
        echo "  decrypt <FILE>                      Decrypt a file with sender key specified in ~/.local/.g/gpg_signer"
        echo "  decrypt                             Decrypt all .asc and .gpg files in current directory"
        echo "  sign <FILE>                         Sign a file using the signer key in ~/.local/.g/gpg_signer"
        echo "  verify <SIG> [FILE]                 Verify a detached signature of a file or the standard input"
        echo "  export signer                       Export the signer public key in ASCII format"
        echo "  export recipient                    Export the recipient public key in ASCII format"
        echo "  config signer [KEY_ID]              Set or display the signer key ID in ~/.local/.g/gpg_signer"
        echo "  config recipient [KEY_ID]           Set or display the recipient key ID in ~/.local/.g/gpg_recipient"
        echo "  keytocard                           Move all subkeys generated by 'g genkey' to Yubikey"
        echo "  fgr <KEY_ID>                        Get the fingerprint of a GPG key with the specified KEY_ID"
        echo "  upgrade                             Upgrade g to the latest version from GitHub"
        ;;
    *)
        echo "Unknown command: $1"
	usage
        exit 1
esac

exit 0
